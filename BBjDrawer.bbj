REM package BBjDrawer
REM /**
REM  * This FILE is part of the BBjDrawer plugin.
REM  * (c) Basis Europe <eu@basis.cloud>
REM  *
REM  * FOR the full copyright AND license information, please view the LICENSE
REM  * FILE that was distributed with this source code.
REM  */
REM /**
REM  * An event that is fired when the drawer is opened OR closed.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
CLASS public BBjDrawerEvent

  FIELD private BBjDrawer Drawer!
  FIELD private BBjNumber Opened!
  REM /**
  REM  * Construct a new BBjDrawerEvent
  REM  *
  REM  * @param drawer! The instance of the BBjDrawer object
  REM  * @param opened! The drawer's opened state
  REM  */
  METHOD public BBjDrawerEvent(BBjDrawer drawer!, BBjNumber drawerOpened!)
    #Drawer! = drawer!
    #Opened! = drawerOpened!
  METHODEND
  REM /**
  REM  * Check IF the drawer is opened.
  REM  * 
  REM  * @return true IF the drawer is opened, false otherwise
  REM  */
  METHOD public Boolean isOpened()
    METHODRET #Opened!
  METHODEND
  REM /**
  REM  * Get the drawer instance.
  REM  *
  REM  * @return BBjDrawerEvent
  REM  */
  METHOD public BBjDrawer getDrawer()
    METHODRET #Drawer!
  METHODEND
  REM /**
  REM  * Alias FOR `BBjDrawerEvent.getDrawer()`.
  REM  *
  REM  * @return BBjDrawerEvent
  REM  */
  METHOD public BBjDrawer getControl()
    METHODRET #getDrawer()
  METHODEND

CLASSEND
REM /**
REM  * A Custom BBj Widget FOR the DWC to create popover drawers
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
CLASS public BBjDrawer
  REM /**
  REM  * A constant to place the drawer at left
  REM  */
  FIELD public static BBjNumber PLACEMENT_LEFT = 2
  REM /**
  REM  * A constant to place the drawer at right
  REM  */
  FIELD public static BBjNumber PLACEMENT_RIGHT = 4
  REM /**
  REM  * A constant to place the drawer at top
  REM  */
  FIELD public static BBjNumber PLACEMENT_TOP = 8
  REM /**
  REM  * A constant to place the drawer at top
  REM  */
  FIELD public static BBjNumber PLACEMENT_TOP_CENTER = 16
  REM /**
  REM  * A constant to place the drawer at top-center
  REM  */
  FIELD public static BBjNumber PLACEMENT_BOTTOM = 32
  REM /**
  REM  * A constant to place the drawer at bottom-center
  REM  */
  FIELD public static BBjNumber PLACEMENT_BOTTOM_CENTER = 64
  REM /**
  REM  * A constant to USE FOR the drawer opened event
  REM  */
  FIELD public static BBjNumber ON_OPENED = 128
  REM /**
  REM  * A constant to USE FOR the drawer closed event
  REM  */
  FIELD public static BBjNumber ON_CLOSED = 256
  REM /**
  REM  * A constant to USE FOR the drawer toggled event
  REM  */
  FIELD public static BBjNumber ON_TOGGLED = 512
  REM /**
  REM  * The drawer's content
  REM  */
  FIELD public BBjControl Content!
  REM /**
  REM  * The drawer's Size
  REM  */
  FIELD public BBjString Label! = "Drawer"  
  REM /**
  REM  * The drawer's Size
  REM  */
  FIELD public BBjString Size! = "16em"
  REM /**
  REM  * The drawer's maximal size
  REM  */
  FIELD public BBjString MaxSize! = null()
  REM /**
  REM  * The drawer's maximal Size
  REM  */
  FIELD public BBjString MaxWidth! = "100%"
  REM /**
  REM  * The drawer's placement
  REM  */
  FIELD public BBjNumber Placement! = BBjDrawer.PLACEMENT_LEFT
  FIELD private BBjWebComponent WebComponent!
  FIELD private BBjWindow Window!
  REM /**
  REM * Construct a new BBjDrawer.
  REM *
  REM * @param wnd! the window instance
  REM */
  METHOD public BBjDrawer(BBjWindow wnd!)
    #Window! = wnd!
    #WebComponent! = wnd!.addWebComponent("dwc-drawer")
    #WebComponent!.executeAsyncScript("document.body.appendChild(component);")
    #WebComponent!.setStyle("width","")
    #WebComponent!.setStyle("height","")
    #WebComponent!.setStyle("position","")
    #WebComponent!.setTabTraversable(0)
    #WebComponent!.setFocusable(0)
    handler! = new BBjDrawerEventHandler(#this!)

    DECLARE AUTO BBjWebEventOptions toggleOptions!

    toggleOptions! = #WebComponent!.newEventOptions()
    #WebComponent!.setCallback("dwc-drawer-opened", handler!, "handleClientEvents", toggleOptions!)
    #WebComponent!.setCallback("dwc-drawer-closed", handler!, "handleClientEvents", toggleOptions!)
  METHODEND
  REM /**
  REM  * Get the canvas's id.
  REM  *
  REM  * @return BBjNumber
  REM  */
  METHOD public BBjNumber getID()
    METHODRET #getWebComponent().getID()
  METHODEND
  REM /**
  REM  * Set the drawer content.
  REM  *
  REM  * @param control! the control to set as content
  REM  */
  METHOD public void setContent(BBjControl control!)
    IF(control! = null())
      THROW "The control cannot be null", 256
    FI

    IF(control!.isDestroyed())
      THROW "The passed control is destroyed", 256
    FI

    #Content! = control!
    #getWebComponent().setSlot(#Content!)
  METHODEND
  REM /**
  REM  * Get the drawer content.
  REM  *
  REM  * IF the content is not set, the METHOD will create a new BBjChildWindow AND set it as content.
  REM  *
  REM  * @return BBjControl
  REM  */
  METHOD public BBjControl getContent()
    IF(#Content! = null())
      #setContent(#Window!.addChildWindow(#Window!.getAvailableControlID(), "", $00108810$, BBjAPI().getSysGui().getAvailableContext()))
    FI

    METHODRET #Content!
  METHODEND
  REM /**
  REM  * Set the drawer size.
  REM  *
  REM  * @param maxWidth! the drawer's max width
  REM  */
  METHOD public void setMaxWidth(BBjString maxWidth!)
    #MaxWidth! = maxWidth!
    #getWebComponent().setStyle("--dwc-drawer-max-width", maxWidth!)
  METHODEND
  REM /**
  REM  * Set the drawer label.
  REM  *
  REM  * @param label! the drawer's label
  REM  */
  METHOD public void setLabel(BBjString label!)
    #Label! = label!
    #getWebComponent().setAttribute("label", label!)
  METHODEND

  REM /**
  REM  * Set the drawer size.
  REM  *
  REM  * The drawer size. Width in CASE placement is left
  REM  * OR right OR height in CASE placement is top OR bottom.
  REM  *
  REM  * @param size! the drawer's size
  REM  */
  METHOD public void setSize(BBjString size!)
    #Size! = size!
    #getWebComponent().setStyle("--dwc-drawer-size", size!)
  METHODEND
  REM /**
  REM  * Set the max drawer size.
  REM  *
  REM  * The drawer's max width. Max width in CASE placement is left
  REM  * OR right OR max height in CASE placement is top OR bottom.
  REM  *
  REM  * @param size! the drawer's max size
  REM  */
  METHOD public void setMaxSize(BBjString maxSize!)
    #MaxSize! = maxSize!
    #getWebComponent().setStyle("--dwc-drawer-max-size", maxSize!)
  METHODEND
  REM /**
  REM  * OPEN the drawer.
  REM  */
  METHOD public void open()
    #getContent().setVisible(BBjAPI.TRUE , err=*next)
    #getWebComponent().putClientProperty("opened", "true")
  METHODEND
  REM /**
  REM  * CLOSE the drawer.
  REM  */
  METHOD public void close()
    #getWebComponent().putClientProperty("opened", "false")
  METHODEND
  REM /**
  REM  * Toggle the drawer
  REM  */
  METHOD public void toggle()
    #getWebComponent().putClientProperty("opened", iff(#isOpened() = BBjAPI.TRUE, "false", "true"))
  METHODEND
  REM /**
  REM  * Check IF the drawer is opened.
  REM  *
  REM  * @returns true IF the drawer is opened, false otherwise
  REM  */
  METHOD public Boolean isOpened()
    METHODRET cast(Boolean, #getWebComponent().getClientProperty("opened"))
  METHODEND
  REM /**
  REM  * Set the drawer position.
  REM  *
  REM  * @param placement! the position of the drawer
  REM  *
  REM  * @see BBjDrawer.PLACEMENT_LEFT
  REM  * @see BBjDrawer.PLACEMENT_RIGHT
  REM  * @see BBjDrawer.PLACEMENT_TOP
  REM  * @see BBjDrawer.PLACEMENT_TOP_CENTER
  REM  * @see BBjDrawer.PLACEMENT_BOTTOM
  REM  * @see BBjDrawer.PLACEMENT_BOTTOM_CENTER
  REM  */
  METHOD public void setPlacement(BBjNumber placement!)
    #Placement! = placement!
    property! = null()
    SWITCH placement!
      CASE BBjDrawer.PLACEMENT_LEFT
        property! = "left"
        BREAK
      CASE BBjDrawer.PLACEMENT_RIGHT
        property! = "right"
        BREAK
      CASE BBjDrawer.PLACEMENT_TOP
        property! = "top"
        BREAK
      CASE BBjDrawer.PLACEMENT_TOP_CENTER
        property! = "top-center"
        BREAK
      CASE BBjDrawer.PLACEMENT_BOTTOM
        property! = "bottom"
        BREAK
      CASE BBjDrawer.PLACEMENT_BOTTOM_CENTER
        property! = "bottom-center"
        BREAK
      CASE default
        property! = "left"
        BREAK
    SWEND

    #getWebComponent().putClientProperty("placement", property!)
  METHODEND
  REM /**
  REM  * Set a widget attribute.
  REM  *
  REM  * @param key! The attribute's name
  REM  * @param value! The attribute's value
  REM  */
  METHOD public void setAttribute(BBjString key!, BBjString value!)
    #getWebComponent().setAttribute(key!, value!)
  METHODEND
  REM /**
  REM  * Get a widget attribute.
  REM  *
  REM  * @param key! The attribute's name
  REM  */
  METHOD public BBjString getAttribute(BBjString key!)
    METHODRET #getWebComponent().getAttribute(key!)
  METHODEND
  REM /**
  REM  * Add a css CLASS to the widget.
  REM  *
  REM  * @param class! The css CLASS to add
  REM  */
  METHOD public void addClass(BBjString class!)
    #getWebComponent().addClass(class!)
  METHODEND
  REM /**
  REM  * REMOVE a css CLASS to the widget.
  REM  *
  REM  * @param class! The css CLASS to add
  REM  */
  METHOD public void removeClass(BBjString class!)
    #getWebComponent().removeClass(class!)
  METHODEND
  REM /**
  REM  * Set an event listener.
  REM  *
  REM  * @param event! The event
  REM  * @param callback! The event CALLBACK
  REM  */
  METHOD public void setCallback(BBjNumber event!, BBjString callback!)
    BBjAPI().setCustomEventCallback(str(#this!) + str(event!), callback!)
  METHODEND
  REM /**
  REM  * Set an event listener.
  REM  *
  REM  * @param event! The event
  REM  * @param callback! A CLASS instance
  REM  * @param callback! The event METHOD
  REM  */
  METHOD public void setCallback(BBjNumber event!, CustomObject instance!, BBjString method!)
    BBjAPI().setCustomEventCallback(str(#this!) + str(event!), instance!, method!)
  METHODEND
  REM /**
  REM  * CLEAR an event CALLBACK
  REM  *
  REM  * @param event! The event
  REM  */
  METHOD public void clearCallback(BBjNumber event!)
    BBjAPI().clearCustomEventCallback(str(#this!) + str(event!))
  METHODEND

CLASSEND
REM /**
REM  * A CLASS which is used to handle the toast client events.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
CLASS public BBjDrawerEventHandler

  FIELD private BBjDrawer Drawer!

  METHOD public BBjDrawerEventHandler(BBjDrawer drawer!)
    #Drawer! = drawer!
  METHODEND
  REM /**
  REM  * Handle the toast client events.
  REM  *
  REM  * @param ev! The event
  REM  */
  METHOD public void handleClientEvents(BBjWebEvent ev!)
    type$ = ev!.getEventType()
    map! = ev!.getEventMap()
    payload! = new BBjDrawerEvent(#Drawer!, iff(type$ = "dwc-drawer-opened", BBjAPI.TRUE, BBjAPI.FALSE))
    SWITCH type$
      CASE "dwc-drawer-opened"
        BBjAPI().postPriorityCustomEvent(str(#Drawer!) + str(BBjDrawer.ON_OPENED), payload!)
        BREAK
      CASE "dwc-drawer-closed"
        BBjAPI().postPriorityCustomEvent(str(#Drawer!) + str(BBjDrawer.ON_CLOSED), payload!)
        BREAK
      CASE DEFAULT
        BREAK
    SWEND

    BBjAPI().postPriorityCustomEvent(str(#Drawer!) + str(BBjDrawer.ON_TOGGLED), payload!)
  METHODEND

CLASSEND
